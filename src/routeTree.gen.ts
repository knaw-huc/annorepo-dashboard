/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CustomQueryIndexRouteImport } from './routes/custom-query/index'
import { Route as ContainerIndexRouteImport } from './routes/container/index'
import { Route as CustomQueryEditorRouteImport } from './routes/custom-query/editor'
import { Route as CustomQueryCustomQueryNameRouteImport } from './routes/custom-query/$customQueryName'
import { Route as ContainerEditorRouteImport } from './routes/container/editor'
import { Route as ContainerContainerNameIndexRouteImport } from './routes/container/$containerName/index'
import { Route as ContainerContainerNameSearchRouteImport } from './routes/container/$containerName/search'
import { Route as ContainerContainerNameAnnotationEditorRouteImport } from './routes/container/$containerName/annotation/editor'
import { Route as ContainerContainerNameAnnotationAnnotationNameRouteImport } from './routes/container/$containerName/annotation/$annotationName'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomQueryIndexRoute = CustomQueryIndexRouteImport.update({
  id: '/custom-query/',
  path: '/custom-query/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainerIndexRoute = ContainerIndexRouteImport.update({
  id: '/container/',
  path: '/container/',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomQueryEditorRoute = CustomQueryEditorRouteImport.update({
  id: '/custom-query/editor',
  path: '/custom-query/editor',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomQueryCustomQueryNameRoute =
  CustomQueryCustomQueryNameRouteImport.update({
    id: '/custom-query/$customQueryName',
    path: '/custom-query/$customQueryName',
    getParentRoute: () => rootRouteImport,
  } as any)
const ContainerEditorRoute = ContainerEditorRouteImport.update({
  id: '/container/editor',
  path: '/container/editor',
  getParentRoute: () => rootRouteImport,
} as any)
const ContainerContainerNameIndexRoute =
  ContainerContainerNameIndexRouteImport.update({
    id: '/container/$containerName/',
    path: '/container/$containerName/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ContainerContainerNameSearchRoute =
  ContainerContainerNameSearchRouteImport.update({
    id: '/container/$containerName/search',
    path: '/container/$containerName/search',
    getParentRoute: () => rootRouteImport,
  } as any)
const ContainerContainerNameAnnotationEditorRoute =
  ContainerContainerNameAnnotationEditorRouteImport.update({
    id: '/container/$containerName/annotation/editor',
    path: '/container/$containerName/annotation/editor',
    getParentRoute: () => rootRouteImport,
  } as any)
const ContainerContainerNameAnnotationAnnotationNameRoute =
  ContainerContainerNameAnnotationAnnotationNameRouteImport.update({
    id: '/container/$containerName/annotation/$annotationName',
    path: '/container/$containerName/annotation/$annotationName',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/container/editor': typeof ContainerEditorRoute
  '/custom-query/$customQueryName': typeof CustomQueryCustomQueryNameRoute
  '/custom-query/editor': typeof CustomQueryEditorRoute
  '/container': typeof ContainerIndexRoute
  '/custom-query': typeof CustomQueryIndexRoute
  '/container/$containerName/search': typeof ContainerContainerNameSearchRoute
  '/container/$containerName': typeof ContainerContainerNameIndexRoute
  '/container/$containerName/annotation/$annotationName': typeof ContainerContainerNameAnnotationAnnotationNameRoute
  '/container/$containerName/annotation/editor': typeof ContainerContainerNameAnnotationEditorRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/container/editor': typeof ContainerEditorRoute
  '/custom-query/$customQueryName': typeof CustomQueryCustomQueryNameRoute
  '/custom-query/editor': typeof CustomQueryEditorRoute
  '/container': typeof ContainerIndexRoute
  '/custom-query': typeof CustomQueryIndexRoute
  '/container/$containerName/search': typeof ContainerContainerNameSearchRoute
  '/container/$containerName': typeof ContainerContainerNameIndexRoute
  '/container/$containerName/annotation/$annotationName': typeof ContainerContainerNameAnnotationAnnotationNameRoute
  '/container/$containerName/annotation/editor': typeof ContainerContainerNameAnnotationEditorRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/container/editor': typeof ContainerEditorRoute
  '/custom-query/$customQueryName': typeof CustomQueryCustomQueryNameRoute
  '/custom-query/editor': typeof CustomQueryEditorRoute
  '/container/': typeof ContainerIndexRoute
  '/custom-query/': typeof CustomQueryIndexRoute
  '/container/$containerName/search': typeof ContainerContainerNameSearchRoute
  '/container/$containerName/': typeof ContainerContainerNameIndexRoute
  '/container/$containerName/annotation/$annotationName': typeof ContainerContainerNameAnnotationAnnotationNameRoute
  '/container/$containerName/annotation/editor': typeof ContainerContainerNameAnnotationEditorRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/container/editor'
    | '/custom-query/$customQueryName'
    | '/custom-query/editor'
    | '/container'
    | '/custom-query'
    | '/container/$containerName/search'
    | '/container/$containerName'
    | '/container/$containerName/annotation/$annotationName'
    | '/container/$containerName/annotation/editor'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/container/editor'
    | '/custom-query/$customQueryName'
    | '/custom-query/editor'
    | '/container'
    | '/custom-query'
    | '/container/$containerName/search'
    | '/container/$containerName'
    | '/container/$containerName/annotation/$annotationName'
    | '/container/$containerName/annotation/editor'
  id:
    | '__root__'
    | '/'
    | '/container/editor'
    | '/custom-query/$customQueryName'
    | '/custom-query/editor'
    | '/container/'
    | '/custom-query/'
    | '/container/$containerName/search'
    | '/container/$containerName/'
    | '/container/$containerName/annotation/$annotationName'
    | '/container/$containerName/annotation/editor'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContainerEditorRoute: typeof ContainerEditorRoute
  CustomQueryCustomQueryNameRoute: typeof CustomQueryCustomQueryNameRoute
  CustomQueryEditorRoute: typeof CustomQueryEditorRoute
  ContainerIndexRoute: typeof ContainerIndexRoute
  CustomQueryIndexRoute: typeof CustomQueryIndexRoute
  ContainerContainerNameSearchRoute: typeof ContainerContainerNameSearchRoute
  ContainerContainerNameIndexRoute: typeof ContainerContainerNameIndexRoute
  ContainerContainerNameAnnotationAnnotationNameRoute: typeof ContainerContainerNameAnnotationAnnotationNameRoute
  ContainerContainerNameAnnotationEditorRoute: typeof ContainerContainerNameAnnotationEditorRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/custom-query/': {
      id: '/custom-query/'
      path: '/custom-query'
      fullPath: '/custom-query'
      preLoaderRoute: typeof CustomQueryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/container/': {
      id: '/container/'
      path: '/container'
      fullPath: '/container'
      preLoaderRoute: typeof ContainerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/custom-query/editor': {
      id: '/custom-query/editor'
      path: '/custom-query/editor'
      fullPath: '/custom-query/editor'
      preLoaderRoute: typeof CustomQueryEditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/custom-query/$customQueryName': {
      id: '/custom-query/$customQueryName'
      path: '/custom-query/$customQueryName'
      fullPath: '/custom-query/$customQueryName'
      preLoaderRoute: typeof CustomQueryCustomQueryNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/container/editor': {
      id: '/container/editor'
      path: '/container/editor'
      fullPath: '/container/editor'
      preLoaderRoute: typeof ContainerEditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/container/$containerName/': {
      id: '/container/$containerName/'
      path: '/container/$containerName'
      fullPath: '/container/$containerName'
      preLoaderRoute: typeof ContainerContainerNameIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/container/$containerName/search': {
      id: '/container/$containerName/search'
      path: '/container/$containerName/search'
      fullPath: '/container/$containerName/search'
      preLoaderRoute: typeof ContainerContainerNameSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/container/$containerName/annotation/editor': {
      id: '/container/$containerName/annotation/editor'
      path: '/container/$containerName/annotation/editor'
      fullPath: '/container/$containerName/annotation/editor'
      preLoaderRoute: typeof ContainerContainerNameAnnotationEditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/container/$containerName/annotation/$annotationName': {
      id: '/container/$containerName/annotation/$annotationName'
      path: '/container/$containerName/annotation/$annotationName'
      fullPath: '/container/$containerName/annotation/$annotationName'
      preLoaderRoute: typeof ContainerContainerNameAnnotationAnnotationNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContainerEditorRoute: ContainerEditorRoute,
  CustomQueryCustomQueryNameRoute: CustomQueryCustomQueryNameRoute,
  CustomQueryEditorRoute: CustomQueryEditorRoute,
  ContainerIndexRoute: ContainerIndexRoute,
  CustomQueryIndexRoute: CustomQueryIndexRoute,
  ContainerContainerNameSearchRoute: ContainerContainerNameSearchRoute,
  ContainerContainerNameIndexRoute: ContainerContainerNameIndexRoute,
  ContainerContainerNameAnnotationAnnotationNameRoute:
    ContainerContainerNameAnnotationAnnotationNameRoute,
  ContainerContainerNameAnnotationEditorRoute:
    ContainerContainerNameAnnotationEditorRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
